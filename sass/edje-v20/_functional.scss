// Format classes mapping by pairing each name to the values
@function _format( $names, $values ) {
  $classes: ();

  // loop the name
  @each $name, $style in $names {
    
    $_classes: (); // temporary map for the child loop

    @each $postfix, $value in $values {
      $_name: #{ $name }#{ $postfix }; // format the name like "pt05"
      $_value: "#{ $style }: #{ $value }"; // format the value like "padding-top: 0.5rem"

      $_classes: map-merge( $_classes, ( $name : $value ) );
    }

    $classes: map-merge( $classes, $_classes );
  }

  @return $classes;
}


@import "functional/typography";

@import "functional/display";
// @import "functional/layout";
// @import "functional/sizing";

// @import "functional/spacing";
// @import "functional/theme";


// $_all-classes: join(
//   join( $_display-classes, $_layout-classes ),
//   join( $_sizing-classes, $_spacing-classes ),
// );

// $_all-classes: join(
//   $_all-classes,
//   join( $_theme-classes, $_typography-classes ),
// );

$_all-classes: $_display-classes;

// Apply styling with given classes
//
// @param $classes (string) - Space-separated list of functional classes
@mixin h( $classes ) {
  @each $c in $classes {
    @each $name, $value in map-get( $_all-classes, $c ) {
      #{ $name } : $value;
    }
  }
}